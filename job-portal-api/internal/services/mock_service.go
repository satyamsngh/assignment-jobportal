// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source services.go -destination mock_service.go -package services
//
// Package services is a generated GoMock package.
package services

import (
	context "context"
	models "job-portal-api/internal/models"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AllJob mocks base method.
func (m *MockService) AllJob(ctx context.Context, userId string) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllJob", ctx, userId)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllJob indicates an expected call of AllJob.
func (mr *MockServiceMockRecorder) AllJob(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllJob", reflect.TypeOf((*MockService)(nil).AllJob), ctx, userId)
}

// Authenticate mocks base method.
func (m *MockService) Authenticate(ctx context.Context, email, password string) (jwt.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, email, password)
	ret0, _ := ret[0].(jwt.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockServiceMockRecorder) Authenticate(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockService)(nil).Authenticate), ctx, email, password)
}

// CreatCompanies mocks base method.
func (m *MockService) CreatCompanies(ctx context.Context, nc models.NewComapanies, UserId uint) (models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatCompanies", ctx, nc, UserId)
	ret0, _ := ret[0].(models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatCompanies indicates an expected call of CreatCompanies.
func (mr *MockServiceMockRecorder) CreatCompanies(ctx, nc, UserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatCompanies", reflect.TypeOf((*MockService)(nil).CreatCompanies), ctx, nc, UserId)
}

// CreateJob mocks base method.
func (m *MockService) CreateJob(ctx context.Context, newJob models.NewJob, userId string) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, newJob, userId)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockServiceMockRecorder) CreateJob(ctx, newJob, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockService)(nil).CreateJob), ctx, newJob, userId)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, nu models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, nu)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, nu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, nu)
}

// CriteriaMeets mocks base method.
func (m *MockService) CriteriaMeets(ctx context.Context, applicant []models.Application) ([]models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CriteriaMeets", ctx, applicant)
	ret0, _ := ret[0].([]models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CriteriaMeets indicates an expected call of CriteriaMeets.
func (mr *MockServiceMockRecorder) CriteriaMeets(ctx, applicant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CriteriaMeets", reflect.TypeOf((*MockService)(nil).CriteriaMeets), ctx, applicant)
}

// JobsByID mocks base method.
func (m *MockService) JobsByID(ctx context.Context, jobID uint64, userId string) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobsByID", ctx, jobID, userId)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobsByID indicates an expected call of JobsByID.
func (mr *MockServiceMockRecorder) JobsByID(ctx, jobID, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobsByID", reflect.TypeOf((*MockService)(nil).JobsByID), ctx, jobID, userId)
}

// ListJobs mocks base method.
func (m *MockService) ListJobs(ctx context.Context, companyId uint, userId string) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx, companyId, userId)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockServiceMockRecorder) ListJobs(ctx, companyId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockService)(nil).ListJobs), ctx, companyId, userId)
}

// OtpService mocks base method.
func (m *MockService) OtpService(details models.ResetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtpService", details)
	ret0, _ := ret[0].(error)
	return ret0
}

// OtpService indicates an expected call of OtpService.
func (mr *MockServiceMockRecorder) OtpService(details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtpService", reflect.TypeOf((*MockService)(nil).OtpService), details)
}

// VerifyOtpService mocks base method.
func (m *MockService) VerifyOtpService(details models.ResetPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtpService", details)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOtpService indicates an expected call of VerifyOtpService.
func (mr *MockServiceMockRecorder) VerifyOtpService(details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtpService", reflect.TypeOf((*MockService)(nil).VerifyOtpService), details)
}

// ViewCompanies mocks base method.
func (m *MockService) ViewCompanies(ctx context.Context, companyId string) ([]models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanies", ctx, companyId)
	ret0, _ := ret[0].([]models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanies indicates an expected call of ViewCompanies.
func (mr *MockServiceMockRecorder) ViewCompanies(ctx, companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanies", reflect.TypeOf((*MockService)(nil).ViewCompanies), ctx, companyId)
}

// ViewCompaniesById mocks base method.
func (m *MockService) ViewCompaniesById(ctx context.Context, companybyid uint, userId string) ([]models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompaniesById", ctx, companybyid, userId)
	ret0, _ := ret[0].([]models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompaniesById indicates an expected call of ViewCompaniesById.
func (mr *MockServiceMockRecorder) ViewCompaniesById(ctx, companybyid, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompaniesById", reflect.TypeOf((*MockService)(nil).ViewCompaniesById), ctx, companybyid, userId)
}
