// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source cache.go -destination mock_cache.go -package cache
//
// Package cache is a generated GoMock package.
package cache

import (
	models "job-portal-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// CheckRedisKey mocks base method.
func (m *MockUserCache) CheckRedisKey(key string) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRedisKey", key)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRedisKey indicates an expected call of CheckRedisKey.
func (mr *MockUserCacheMockRecorder) CheckRedisKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRedisKey", reflect.TypeOf((*MockUserCache)(nil).CheckRedisKey), key)
}

// DelRedisKey mocks base method.
func (m *MockUserCache) DelRedisKey(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelRedisKey", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelRedisKey indicates an expected call of DelRedisKey.
func (mr *MockUserCacheMockRecorder) DelRedisKey(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelRedisKey", reflect.TypeOf((*MockUserCache)(nil).DelRedisKey), email)
}

// GetRedisKeyOtp mocks base method.
func (m *MockUserCache) GetRedisKeyOtp(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedisKeyOtp", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedisKeyOtp indicates an expected call of GetRedisKeyOtp.
func (mr *MockUserCacheMockRecorder) GetRedisKeyOtp(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedisKeyOtp", reflect.TypeOf((*MockUserCache)(nil).GetRedisKeyOtp), key)
}

// SetRedisKey mocks base method.
func (m *MockUserCache) SetRedisKey(key string, value models.Job) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRedisKey", key, value)
}

// SetRedisKey indicates an expected call of SetRedisKey.
func (mr *MockUserCacheMockRecorder) SetRedisKey(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedisKey", reflect.TypeOf((*MockUserCache)(nil).SetRedisKey), key, value)
}

// SetRedisKeyOtp mocks base method.
func (m *MockUserCache) SetRedisKeyOtp(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedisKeyOtp", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedisKeyOtp indicates an expected call of SetRedisKeyOtp.
func (mr *MockUserCacheMockRecorder) SetRedisKeyOtp(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedisKeyOtp", reflect.TypeOf((*MockUserCache)(nil).SetRedisKeyOtp), key, value)
}
