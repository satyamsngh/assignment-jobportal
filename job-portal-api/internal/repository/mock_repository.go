// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock_repository.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	models "job-portal-api/internal/models"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockUserRepo) AutoMigrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoMigrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockUserRepoMockRecorder) AutoMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockUserRepo)(nil).AutoMigrate))
}

// CheckEmail mocks base method.
func (m *MockUserRepo) CheckEmail(ctx context.Context, email, password string) (jwt.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", ctx, email, password)
	ret0, _ := ret[0].(jwt.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockUserRepoMockRecorder) CheckEmail(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockUserRepo)(nil).CheckEmail), ctx, email, password)
}

// CreateCompany mocks base method.
func (m *MockUserRepo) CreateCompany(ctx context.Context, companyData models.Companies) (models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, companyData)
	ret0, _ := ret[0].(models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockUserRepoMockRecorder) CreateCompany(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockUserRepo)(nil).CreateCompany), ctx, companyData)
}

// CreateJob mocks base method.
func (m *MockUserRepo) CreateJob(ctx context.Context, jobData models.NewJob) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, jobData)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockUserRepoMockRecorder) CreateJob(ctx, jobData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockUserRepo)(nil).CreateJob), ctx, jobData)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, userData models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, userData)
}

// FindAllJobs mocks base method.
func (m *MockUserRepo) FindAllJobs(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllJobs", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllJobs indicates an expected call of FindAllJobs.
func (mr *MockUserRepoMockRecorder) FindAllJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllJobs", reflect.TypeOf((*MockUserRepo)(nil).FindAllJobs), ctx)
}

// FindJob mocks base method.
func (m *MockUserRepo) FindJob(ctx context.Context, cid uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindJob", ctx, cid)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindJob indicates an expected call of FindJob.
func (mr *MockUserRepoMockRecorder) FindJob(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJob", reflect.TypeOf((*MockUserRepo)(nil).FindJob), ctx, cid)
}

// GetJobById mocks base method.
func (m *MockUserRepo) GetJobById(ctx context.Context, jobid uint) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobById", ctx, jobid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobById indicates an expected call of GetJobById.
func (mr *MockUserRepoMockRecorder) GetJobById(ctx, jobid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobById", reflect.TypeOf((*MockUserRepo)(nil).GetJobById), ctx, jobid)
}

// IsUserPresentByEmail mocks base method.
func (m *MockUserRepo) IsUserPresentByEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserPresentByEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserPresentByEmail indicates an expected call of IsUserPresentByEmail.
func (mr *MockUserRepoMockRecorder) IsUserPresentByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserPresentByEmail", reflect.TypeOf((*MockUserRepo)(nil).IsUserPresentByEmail), email)
}

// ResetPasswordByEmail mocks base method.
func (m *MockUserRepo) ResetPasswordByEmail(email, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordByEmail", email, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordByEmail indicates an expected call of ResetPasswordByEmail.
func (mr *MockUserRepoMockRecorder) ResetPasswordByEmail(email, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordByEmail", reflect.TypeOf((*MockUserRepo)(nil).ResetPasswordByEmail), email, newPassword)
}

// ViewCompanies mocks base method.
func (m *MockUserRepo) ViewCompanies(ctx context.Context) ([]models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanies", ctx)
	ret0, _ := ret[0].([]models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanies indicates an expected call of ViewCompanies.
func (mr *MockUserRepoMockRecorder) ViewCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanies", reflect.TypeOf((*MockUserRepo)(nil).ViewCompanies), ctx)
}

// ViewCompanyById mocks base method.
func (m *MockUserRepo) ViewCompanyById(ctx context.Context, cid uint) ([]models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanyById", ctx, cid)
	ret0, _ := ret[0].([]models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanyById indicates an expected call of ViewCompanyById.
func (mr *MockUserRepoMockRecorder) ViewCompanyById(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanyById", reflect.TypeOf((*MockUserRepo)(nil).ViewCompanyById), ctx, cid)
}

// ViewJobByCompanyId mocks base method.
func (m *MockUserRepo) ViewJobByCompanyId(ctx context.Context, id uint) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobByCompanyId", ctx, id)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobByCompanyId indicates an expected call of ViewJobByCompanyId.
func (mr *MockUserRepoMockRecorder) ViewJobByCompanyId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobByCompanyId", reflect.TypeOf((*MockUserRepo)(nil).ViewJobByCompanyId), ctx, id)
}

// ViewJobDetailsById mocks base method.
func (m *MockUserRepo) ViewJobDetailsById(ctx context.Context, jid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobDetailsById", ctx, jid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobDetailsById indicates an expected call of ViewJobDetailsById.
func (mr *MockUserRepoMockRecorder) ViewJobDetailsById(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobDetailsById", reflect.TypeOf((*MockUserRepo)(nil).ViewJobDetailsById), ctx, jid)
}
